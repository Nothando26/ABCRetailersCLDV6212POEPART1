@model ABCRetailersPOEPART1.Models.ViewModels.OrderCreateViewModel
@{
    ViewData["Title"] = "Create Order";
}

<h2><i class="fas fa-shopping-cart"></i> Add Order</h2>

<div class="row">
    <div class="col-md-8">
        <form asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group mb-3">
                <label asp-for="CustomerId" class="form-label">Select Customer</label>
                <select asp-for="CustomerId" class="form-select" id="customerSelect" required>
                    <option value="">-- Select Customer --</option>
                    @foreach (var customer in Model.Customers)
                    {
                        <option value="@customer.RowKey">
                            @customer.Name @customer.Surname (@customer.Username)
                        </option>
                    }
                </select>
                <span asp-validation-for="CustomerId" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="ProductId" class="form-label">Select Product</label>
                <select asp-for="ProductId" class="form-select" id="productSelect" required>
                    <option value="">-- Select Product --</option>
                    @foreach (var product in Model.Products)
                    {
                        <option value="@product.RowKey" data-price="@product.Price" data-stock="@product.StockAvailable">
                            @product.ProductName - @product.Price.ToString("C") (Stock: @product.StockAvailable)
                        </option>
                    }
                </select>
                <span asp-validation-for="ProductId" class="text-danger"></span>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="OrderDate" class="form-label">Order Date</label>
                        <input asp-for="OrderDate" class="form-control" type="date" />
                        <span asp-validation-for="OrderDate" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Quantity" class="form-label">Quantity</label>
                        <input asp-for="Quantity" class="form-control" type="number" min="1" id="quantityInput" required />
                        <span asp-validation-for="Quantity" class="text-danger"></span>
                        <div id="stockWarning" class="form-text text-warning" style="display: none;"></div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label class="form-label">Unit Price</label>
                        <input type="text" class="form-control" id="unitPriceDisplay" readonly placeholder="Select product" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label class="form-label">Total Price</label>
                        <input type="text" class="form-control" id="totalPriceDisplay" readonly placeholder="$0.00" />
                    </div>
                </div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Status" class="form-label">Status</label>
                <select asp-for="Status" class="form-select" disabled>
                    <option value="Submitted" selected>Submitted (Default)</option>
                </select>
                <span asp-validation-for="Status" class="text-danger"></span>
                <div class="form-text">Status will be set to "Submitted" when order is created</div>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <i class="fas fa-save"></i> Create Order
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="fas fa-times"></i> Cancel
                </a>
            </div>
        </form>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h6 class="card-title mb-0"><i class="fas fa-info-circle"></i> Order Summary</h6>
            </div>
            <div class="card-body">
                <div id="orderSummary">
                    <p class="text-muted">Select customer and product to see order summary</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        let currentPrice = 0;
        let availableStock = 0;
        let selectedProductName = '';

        const productSelect = document.getElementById('productSelect');
        const customerSelect = document.getElementById('customerSelect');
        const quantityInput = document.getElementById('quantityInput');
        const unitPriceDisplay = document.getElementById('unitPriceDisplay');
        const totalPriceDisplay = document.getElementById('totalPriceDisplay');
        const stockWarning = document.getElementById('stockWarning');
        const submitBtn = document.getElementById('submitBtn');

        productSelect.addEventListener('change', updateProductDetails);
        quantityInput.addEventListener('input', () => { validateQuantity(); updateTotalPrice(); updateOrderSummary(); });
        customerSelect.addEventListener('change', updateOrderSummary);

        function updateProductDetails() {
            const selectedOption = productSelect.options[productSelect.selectedIndex];
            if (selectedOption.value) {
                currentPrice = parseFloat(selectedOption.dataset.price);
                availableStock = parseInt(selectedOption.dataset.stock);
                selectedProductName = selectedOption.text.split(' - ')[0];

                unitPriceDisplay.value = '$' + currentPrice.toFixed(2);
                quantityInput.max = availableStock;

                updateTotalPrice();
                updateOrderSummary();
                validateQuantity();
            } else {
                currentPrice = 0;
                availableStock = 0;
                selectedProductName = '';
                unitPriceDisplay.value = '';
                totalPriceDisplay.value = '';
                updateOrderSummary();
            }
        }

        function validateQuantity() {
            const quantity = parseInt(quantityInput.value) || 0;
            if (quantity > availableStock && availableStock > 0) {
                stockWarning.textContent = `⚠️ Only ${availableStock} items in stock!`;
                stockWarning.className = 'form-text text-danger';
                stockWarning.style.display = 'block';
                submitBtn.disabled = true;
            } else if (quantity > 0) {
                stockWarning.textContent = `✅ ${quantity} items available`;
                stockWarning.className = 'form-text text-success';
                stockWarning.style.display = 'block';
                submitBtn.disabled = false;
            } else {
                stockWarning.style.display = 'none';
                submitBtn.disabled = false;
            }
        }

        function updateTotalPrice() {
            const quantity = parseInt(quantityInput.value) || 0;
            if (currentPrice > 0 && quantity > 0) {
                totalPriceDisplay.value = '$' + (currentPrice * quantity).toFixed(2);
            } else {
                totalPriceDisplay.value = '$0.00';
            }
        }

        function updateOrderSummary() {
            const quantity = parseInt(quantityInput.value) || 0;
            const summaryDiv = document.getElementById('orderSummary');

            if (customerSelect.value && productSelect.value && quantity > 0) {
                const customerText = customerSelect.options[customerSelect.selectedIndex].text;
                const total = currentPrice * quantity;

                summaryDiv.innerHTML = `
                    <div class="alert alert-info">
                        <h6><i class="fas fa-shopping-cart"></i> Order Preview</h6>
                        <p><strong>Customer:</strong> ${customerText}</p>
                        <p><strong>Product:</strong> ${selectedProductName}</p>
                        <p><strong>Quantity:</strong> ${quantity}</p>
                        <p><strong>Unit Price:</strong> $${currentPrice.toFixed(2)}</p>
                        <hr>
                        <p><strong>Total:</strong> $${total.toFixed(2)}</p>
                    </div>
                `;
            } else {
                summaryDiv.innerHTML = `<p class="text-muted">Select customer and product to see order summary</p>`;
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            updateOrderSummary();
        });
    </script>
}

